#include<iostream>
#include<fstream>
#include<vector>

int readint(char string[], int * position, int lenght){
    bool writing = 0;
    int read =0,i = *position;
    for(i ; i < lenght; i++){
        if(string[i] =='\000'){
            break;
        }
        if(string[i] < '0' || string[i] > '9'){
            if(writing){
                break;
            }
        }
        else{
            writing = true;
            read = read * 10 + string[i]- '0';
        }
    }
    *position = i;
    if(!writing){
        read = -1;
    }
    return read;
}
int ifEvenHowMany(unsigned long long value){
    int i = 0;
    unsigned long long temp = 1;
    while(value >= temp){
        temp *= 10;
        i++;
    }
    if(i % 2 == 0){
        return i / 2;
    }
    else{
        return 0;
    }
}

int main(){
    std::ifstream input;
    input.open("input.txt", std::ofstream::in );
    if (input.fail()) {
		std::cout << "Error happend with inFile.";
		exit(1);
	}
    std::vector <unsigned long long> stones;
    
    unsigned long long pow[] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000};

    unsigned long long skip[10][51] = {
        {1, 1, 1, 2, 4, 4, 7, 14, 16, 20, 39, 62, 81, 110, 200, 328, 418, 667, 1059, 1546, 2377, 3572, 5602, 8268, 12343, 19778, 29165, 43726, 67724, 102131, 156451, 234511, 357632, 549949, 819967, 1258125, 1916299, 2886408, 4414216, 6669768, 10174278, 15458147, 23333796, 35712308, 54046805, 81997335, 125001266, 189148778, 288114305, 437102505, 663251546},
        {1, 1, 2, 4, 4, 7, 14, 16, 20, 39, 62, 81, 110, 200, 328, 418, 667, 1059, 1546, 2377, 3572, 5602, 8268, 12343, 19778, 29165, 43726, 67724, 102131, 156451, 234511, 357632, 549949, 819967, 1258125, 1916299, 2886408, 4414216, 6669768, 10174278, 15458147, 23333796, 35712308, 54046805, 81997335, 125001266, 189148778, 288114305, 437102505, 663251546, 1010392024},
        {1, 1, 2, 4, 4, 6, 12, 16, 19, 30, 57, 92, 111, 181, 295, 414, 661, 977, 1501, 2270, 3381, 5463, 7921, 11819, 18712, 27842, 42646, 64275, 97328, 150678, 223730, 343711, 525238, 784952, 1208065, 1824910, 2774273, 4230422, 6365293, 9763578, 14777945, 22365694, 34205743, 51643260, 78678894, 119550250, 181040219, 276213919, 417940971, 635526775, 967190364},
        {1, 1, 2, 4, 4, 5, 10, 16, 26, 35, 52, 79, 114, 202, 294, 401, 642, 987, 1556, 2281, 3347, 5360, 7914, 12116, 18714, 27569, 42628, 64379, 98160, 150493, 223231, 344595, 524150, 788590, 1210782, 1821382, 2779243, 4230598, 6382031, 9778305, 14761601, 22417792, 34225846, 51690137, 78827911, 119542610, 181315830, 276460158, 418258991, 636641443, 967436144},
        {1, 1, 2, 4, 4, 4, 8, 16, 27, 30, 47, 82, 115, 195, 269, 390, 637, 951, 1541, 2182, 3204, 5280, 7721, 11820, 17957, 26669, 41994, 62235, 95252, 146462, 216056, 336192, 508191, 766555, 1178119, 1761823, 2709433, 4110895, 6188994, 9515384, 14316637, 21807800, 33255984, 50149950, 76709712, 116004670, 176169842, 268815408, 405925411, 618986605, 939523808},
        {1, 1, 1, 2, 4, 8, 8, 11, 22, 32, 45, 67, 109, 163, 223, 383, 597, 808, 1260, 1976, 3053, 4529, 6675, 10627, 15847, 23822, 37090, 55161, 84208, 128121, 194545, 298191, 444839, 681805, 1042629, 1565585, 2396146, 3626619, 5509999, 8396834, 12678459, 19375816, 29353796, 44468482, 67897697, 102728207, 156270923, 237448520, 359945119, 548404180, 830902728},
        {1, 1, 1, 2, 4, 8, 8, 11, 22, 32, 54, 68, 103, 183, 250, 401, 600, 871, 1431, 2033, 3193, 4917, 7052, 11371, 16815, 25469, 39648, 57976, 90871, 136703, 205157, 319620, 473117, 727905, 1110359, 1661899, 2567855, 3849988, 5866379, 8978479, 13464170, 20675981, 31260715, 47355277, 72483044, 109181845, 166707433, 253134047, 382914632, 585166040, 884539345},
        {1, 1, 1, 2, 4, 8, 8, 11, 22, 32, 52, 72, 106, 168, 242, 413, 602, 832, 1369, 2065, 3165, 4762, 6994, 11170, 16509, 25071, 39034, 57254, 88672, 134638, 203252, 312940, 465395, 716437, 1092207, 1637097, 2519878, 3794783, 5771904, 8814021, 13273744, 20328089, 30742356, 46604985, 71251415, 107529561, 163892525, 248939400, 377032515, 575197697, 870467992},
        {1, 1, 1, 2, 4, 7, 7, 11, 22, 31, 48, 69, 103, 161, 239, 393, 578, 812, 1322, 2011, 3034, 4580, 6798, 10738, 16018, 24212, 37525, 55534, 85483, 130183, 196389, 301170, 450896, 691214, 1054217, 1583522, 2428413, 3669747, 5573490, 8505207, 12835708, 19605147, 29704486, 45028011, 68747690, 103934296, 158185825, 240410770, 364289594, 555105869, 841069902},
        {1, 1, 1, 2, 4, 8, 8, 11, 22, 32, 54, 70, 103, 183, 262, 419, 586, 854, 1468, 2131, 3216, 4888, 7217, 11617, 17059, 25793, 40124, 58820, 92114, 139174, 208558, 322818, 480178, 740365, 1126352, 1685448, 2602817, 3910494, 5953715, 9102530, 13675794, 20970437, 31705673, 48074246, 73537869, 110811935, 169092081, 256830213, 388727714, 593534295, 897592763}
    };
    int look = 75;
    unsigned long long total = 0;

    int pos =0;
    char line[256] = {0};
    input.getline(line, 256);
    int temp = readint(line, &pos, 256);
    
    while (temp >= 0){
        stones.push_back(temp);
        temp = readint(line, &pos, 256);
    }
    input.close();
    for(int p = 0; p < look; p++){
        temp = stones.size();
        std::cout << temp << ", " ;
          for(int i = 0; i < temp; i++){
            // after 25 blinks it will remove the bigest number comunity: 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9
            if(look - 50 < p && stones[i] >= 0 && stones[i] < 10){
                total += skip[stones[i]][look - p];
                stones.erase(stones.begin() + i);
                i--;
                temp--;
            }
            else if(stones[i] == 0){
                stones[i] = 1;
            }
            else{
                int nubearEven = ifEvenHowMany(stones[i]);
                if(nubearEven > 0){
                    unsigned long long prev = stones[i];
                    stones[i] = stones[i] / pow[nubearEven];
                    stones.push_back(prev % pow[nubearEven]);
                }
                else{
                    stones[i] *= 2024;
                }
            }
        }
    }
    
    
    std::cout << std::endl << stones.size() << " + " << total << std::endl << stones.size() + total;
    std::cin;
    return 0;
}
